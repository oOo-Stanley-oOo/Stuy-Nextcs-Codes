//Goal: To make a bouncing ball affected by gravity
//***** TEMPLATE USED! NOT ENTIRELY WRITTEN BY STANLEY OR JASPER
//***** SOME CODE MAY NOT BE AVAILABLE OR MISSING

float GRAVITY = .4;
int MAX_SIZE  = 50;
int MIN_SIZE = 10;
float MAX_MASS = 10;
float MIN_MASS = 1;

int NUM_ORBS = 10;
Orb[] orbs;
boolean moving;
boolean multiBall;
boolean earthGravity;
boolean orbit;
boolean bounce;
boolean trails;

Orb earth;
Orb centerGravity;

void setup() {
  noStroke();
  size(600, 600);
  background(200);
  orbs = new Orb[NUM_ORBS];
  resetRandom();
  earth= new Orb(300,height*999,50,500);
  centerGravity= new Orb(width/2,height/2,20,100);
}//setup

void draw() {
  if (!trails) {
    background(200);
    stroke(0);
  }
  displayMode();
  if (trails) {
    noStroke();
  }

  //always display the orbs
  for (int i=0; i<orbs.length; i++) {
    orbs[i].display();
  }//show orbs
earth.display();
centerGravity.display();
  //if moving is active, run the gravity simulation
  //using whatever modes are currently active.
  if (moving) {
    for (int i=0; i<orbs.length; i++) {

      //for mutual attraction mode, each orb should
      //exert gravity on each other orb.
      if (multiBall) {
        for(int a=1;a<orbs.length;a++){
          PVector b=orbs[i].getGravity(orbs[a], GRAVITY);
  orbs[i].applyForce(b);
        }
      }//orbs attract each other

      //for earth gravity mode, each orb should feel a
      //downward gravity force similar to how the earth's
      //gravity pulls on all objects on earth.
      if (earthGravity) {
        PVector g=orbs[i].getGravity(earth,GRAVITY);
  orbs[i].applyForce(g);
      }//orbs pulled down by earth

      //for orbit mode, a single orb at the center should
      //exert a gravitational force on all the other orbs
      if (orbit) {
        PVector q=orbs[i].getGravity(centerGravity,GRAVITY);
  orbs[i].applyForce(q);
        
      }//orbs pulld toward center

    }//apply gravity

    //if moving is on, call run on each orb
    //This is the ONLY TIME RUN SHOULD BE CALLED
    for (int i=0; i<orbs.length; i++) {
      orbs[i].run(bounce);
    }//run the sumlation
  }

}//draw

void pushAll(PVector p) {
  for (int i=0; i<orbs.length; i++) {
    orbs[i].applyForce(p);
  }
}//pushAll

void resetRandom() {
  moving = false;
  bounce = false;
  multiBall = true;
  earthGravity = false;
  orbit = false;
  background(200);
  for (int i=0; i<orbs.length; i++) {
    int s = int(random(MIN_SIZE, MAX_SIZE));
    float m = random(MIN_MASS, MAX_MASS);
    int x = int(random(s, width-s));
    int y = int(random(s, height-s));
    orbs[i] = new Orb(x, y, s, m);
  }
}//resetRnadom

void resetHorizontal() {
  moving = false;
  bounce = false;
  multiBall = false;
  earthGravity = true;
  orbit = false;
  background(200);
  int x = 10;
  int y = 60;
  for (int i=0; i<orbs.length; i++) {
    int s = int(random(MIN_SIZE, MAX_SIZE));
    float m = random(MIN_MASS, MAX_MASS);
    x+= s/2;
    orbs[i] = new Orb(x, y, s, m);
    x+= s/2 + 10;
  }
}//resetHorizontal

void resetVertical() {
  moving = false;
  bounce = false;
  earthGravity = false;
  multiBall = false;
  orbit = true;
  background(200);
  int x = width/2;
  int y = 62;
  for (int i=0; i<orbs.length; i++) {
    int s = 16;//int(random(MIN_SIZE, MAX_SIZE));
    float m = random(MIN_MASS, MAX_MASS);
    orbs[i] = new Orb(x, y, s, m);
    y+= 44;

    if (i == orbs.length/2-1) {
      y = height/2 + 40;
    }
  }
}//reset

void keyPressed() {
  if (key == ' ') {
    moving = !moving;
  }
  if (key == 'b')  {
    bounce = !bounce;
  }
  if (key == 'm')  {
    multiBall = !multiBall;
  }
  if (key == 'e')  {
    earthGravity = !earthGravity;
  }
  if (key == 'o') {
    orbit = !orbit;
  }
  if (key == 't') {
    trails = !trails;
  }
  if (key == 'r') {
    resetRandom();
  }
  if (key == 'h') {
    resetHorizontal();
  }
  if (key == 'v')  {
    resetVertical();
  }
  if (keyCode == UP) {
    pushAll(new PVector(0, -0.5));
  }
  if (keyCode == DOWN) {
    pushAll(new PVector(0, 0.5));
  }
  if (keyCode == LEFT) {
    pushAll(new PVector(-0.5, 0));
  }
  if (keyCode == RIGHT) {
    pushAll(new PVector(0.5, 0));
  }
}//keyPressed

void displayMode() {
  //initial setup
  color c;
  textAlign(LEFT, TOP);
  textSize(15);
  noStroke();

  //red or green boxes
  c = moving ? color(0, 255, 0) : color(255, 0, 0);
  fill(c);
  rect(0, 0, 53, 20);
  c = bounce ? color(0, 255, 0) : color(255, 0, 0);
  fill(c);
  rect(54, 0, 57, 20);
  c = multiBall ? color(0, 255, 0) : color(255, 0, 0);
  fill(c);
  rect(112, 0, 140, 20);
  c = earthGravity ? color(0, 255, 0) : color(255, 0, 0);
  fill(c);
  rect(253, 0, 100, 20);
  c = orbit ? color(0, 255, 0) : color(255, 0, 0);
  fill(c);
  rect(354, 0, 42, 20);
  stroke(0);
  fill(0);
  text("MOVING", 1, 0);
  text("BOUNCE", 55, 0);
  text("MUTUAL ATTRACTION", 113, 0);
  text("EARTH GRAVITY", 254, 0);
  text("ORBIT", 355, 0);

}
class Orb {

  PVector position;
  PVector velocity;
  PVector acceleration;
  int size;
  float mass;
  color c;

  Orb(int x, int y, int s, float m) {
    position = new PVector(x, y);
    velocity = new PVector(0, 0);
    acceleration = new PVector(0, 0);
    size = s;
    mass = m;
    c = color(random(256), random(256), random(256));
  }//constructor

  void run(boolean bounce) {
    position.add(velocity);
    velocity.add(acceleration);
    acceleration.mult(0);

    if (bounce) {
      yBounce();
      xBounce();
    }
  }//run

  PVector getGravity(Orb o, float G) {
    if (o != this) {
      float d = this.position.dist(o.position);
      d = constrain(d, 5, 100);
      float mag = (G * mass * o.mass) / (d * d);
      PVector direction = PVector.sub(o.position, this.position);
      direction.normalize();
      direction.mult(mag);
      return direction;
    }
    return new PVector(0, 0);
  }//getGravity

  float getDensity() {
    return mass/size;
  }//getDensity

  void applyForce(PVector f) {
    PVector newf = f.copy();
    newf.div( mass );
    acceleration.add(newf);
  }//applyForce

  void yBounce() {
    if (position.y < size/2) {
      position.y = size/2;
      velocity.y *= -1;
    }
    else if (position.y >= (height-size/2)) {
      position.y = height - size/2;
      velocity.y *= -1;
    }
  }//yBounce

  void xBounce() {
    if (position.x < size/2) {
      position.x = size/2;
      velocity.x *= -1;
    }
    else if (position.x >= width - size/2) {
      position.x = width - size/2;
      velocity.x *= -1;
    }
  }//xBounce

  boolean checkYBoundry() {
    boolean check = position.y >= height - size/2;
    check = check || (position.y <= size/2);
    return check;
  }
  boolean checkXBoundry() {
    boolean check = position.x >= width - size/2;
    check = check || (position.x <= size/2);
    return check;
  }

  void display() {
    int t = int(map(getDensity(), MIN_MASS/MAX_SIZE, MAX_MASS/MIN_SIZE, 100, 255));
    fill(c, t);
    circle(position.x, position.y, size);
  }//display

}//OrbNode
